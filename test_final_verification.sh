#!/bin/bash

# FINAL VERIFICATION TEST
# This performs the most critical verification checks to ensure everything works

echo "üîí FINAL VERIFICATION OF AUTHENTICATION SYSTEM"
echo "=============================================="

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test tracking
CRITICAL_TESTS=0
CRITICAL_PASSED=0

log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%H:%M:%S')
    
    case $level in
        "SUCCESS") echo -e "${GREEN}[${timestamp}] ‚úÖ ${message}${NC}" ;;
        "ERROR") echo -e "${RED}[${timestamp}] ‚ùå ${message}${NC}" ;;
        "INFO") echo -e "${BLUE}[${timestamp}] ‚ÑπÔ∏è  ${message}${NC}" ;;
        "CHECK") echo -e "${YELLOW}[${timestamp}] üîç ${message}${NC}" ;;
    esac
}

critical_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_pattern="$3"
    
    CRITICAL_TESTS=$((CRITICAL_TESTS + 1))
    log "CHECK" "CRITICAL TEST: $test_name"
    
    output=$(eval "$test_command" 2>&1)
    exit_code=$?
    
    if [ $exit_code -eq 0 ] && echo "$output" | grep -q "$expected_pattern"; then
        CRITICAL_PASSED=$((CRITICAL_PASSED + 1))
        log "SUCCESS" "$test_name - PASSED"
        return 0
    else
        log "ERROR" "$test_name - FAILED"
        echo "    Expected: $expected_pattern"
        echo "    Got: $(echo "$output" | head -1)"
        return 1
    fi
}

echo ""
log "INFO" "üéØ PERFORMING CRITICAL AUTHENTICATION CHECKS"

# Clean up
rm -f final_test_cookies.txt

# Test 1: CSRF Token Retrieval
critical_test "CSRF Token Retrieval" \
    "curl -s -c final_test_cookies.txt 'http://localhost:8000/api/auth/csrf/'" \
    "csrfToken"

# Extract CSRF token
csrf_token=$(curl -s -c final_test_cookies.txt 'http://localhost:8000/api/auth/csrf/' | python3 -c "import sys, json; print(json.load(sys.stdin)['csrfToken'])" 2>/dev/null || echo "")

# Test 2: Login Success
critical_test "Login Authentication" \
    "curl -s -b final_test_cookies.txt -c final_test_cookies.txt -H 'Content-Type: application/json' -H 'X-CSRFToken: $csrf_token' -d '{\"username\":\"admin\",\"password\":\"admin123\"}' 'http://localhost:8000/api/auth/login/'" \
    "Login successful"

# Test 3: Cookie Persistence
critical_test "HttpOnly Cookie Storage" \
    "grep -E '(access_token|refresh_token)' final_test_cookies.txt" \
    "HttpOnly"

# Test 4: Authentication Verification
critical_test "Authentication State Verification" \
    "curl -s -b final_test_cookies.txt 'http://localhost:8000/api/auth/me/'" \
    "admin"

# Test 5: Logout Functionality
critical_test "Logout Process" \
    "curl -s -b final_test_cookies.txt -c final_test_cookies.txt -H 'Content-Type: application/json' -H 'X-CSRFToken: $csrf_token' -X POST 'http://localhost:8000/api/auth/logout/'" \
    "Logout successful"

# Test 6: Post-Logout Verification
critical_test "Post-Logout Security" \
    "curl -s -b final_test_cookies.txt 'http://localhost:8000/api/auth/me/'" \
    "Authentication credentials were not provided"

echo ""
log "INFO" "üîç DETAILED VERIFICATION RESULTS"

echo ""
echo "üìã COOKIE ANALYSIS:"
if [ -f final_test_cookies.txt ]; then
    echo "Final cookie state:"
    cat final_test_cookies.txt | sed 's/^/  /'
    echo ""
    
    if grep -q "access_token" final_test_cookies.txt; then
        log "ERROR" "‚ö†Ô∏è  access_token still present after logout"
    else
        log "SUCCESS" "‚úÖ access_token properly cleared after logout"
    fi
    
    if grep -q "refresh_token" final_test_cookies.txt; then
        log "ERROR" "‚ö†Ô∏è  refresh_token still present after logout"
    else
        log "SUCCESS" "‚úÖ refresh_token properly cleared after logout"
    fi
    
    if grep -q "csrftoken" final_test_cookies.txt; then
        log "SUCCESS" "‚úÖ CSRF token maintained for future requests"
    fi
fi

echo ""
echo "üéØ DJANGO RESPONSE VERIFICATION:"
log "CHECK" "Verifying Django login view returns Response() object with Set-Cookie headers"

# Test the actual Django response headers
response_headers=$(curl -s -I -b final_test_cookies.txt -H "X-CSRFToken: $csrf_token" -H "Content-Type: application/json" -d '{"username":"admin","password":"admin123"}' "http://localhost:8000/api/auth/login/")

if echo "$response_headers" | grep -q "Set-Cookie.*access_token"; then
    log "SUCCESS" "‚úÖ Django sets access_token cookie in Set-Cookie header"
else
    log "ERROR" "‚ùå Django does not set access_token cookie"
fi

if echo "$response_headers" | grep -q "Set-Cookie.*refresh_token"; then
    log "SUCCESS" "‚úÖ Django sets refresh_token cookie in Set-Cookie header"
else
    log "ERROR" "‚ùå Django does not set refresh_token cookie"
fi

echo ""
echo "üîß CORS CONFIGURATION VERIFICATION:"
log "CHECK" "Testing CORS headers with credentials"

cors_test=$(curl -s -H "Origin: http://localhost:3000" -H "Access-Control-Request-Method: POST" -H "Access-Control-Request-Headers: content-type,x-csrftoken" -X OPTIONS "http://localhost:8000/api/auth/login/")

if echo "$cors_test" | grep -q "Access-Control-Allow-Credentials"; then
    log "SUCCESS" "‚úÖ CORS allows credentials"
else
    log "ERROR" "‚ùå CORS does not allow credentials"
fi

echo ""
echo "üìä FINAL VERIFICATION SUMMARY:"
echo "================================"
echo "Critical Tests: $CRITICAL_TESTS"
echo "Passed: $CRITICAL_PASSED"
echo "Failed: $((CRITICAL_TESTS - CRITICAL_PASSED))"

if [ $CRITICAL_PASSED -eq $CRITICAL_TESTS ]; then
    echo ""
    log "SUCCESS" "üèÜ ALL CRITICAL TESTS PASSED!"
    echo ""
    echo "üîí AUTHENTICATION SYSTEM STATUS: FULLY OPERATIONAL"
    echo "üç™ COOKIE HANDLING: SECURE AND FUNCTIONAL"
    echo "üõ°Ô∏è  CSRF PROTECTION: ACTIVE"
    echo "üåê CORS CONFIGURATION: CORRECT"
    echo "üîÑ SESSION MANAGEMENT: WORKING"
    echo ""
    echo "‚úÖ The authentication issue has been COMPLETELY RESOLVED"
    echo "‚úÖ Cookies are properly set by Django and stored by browser"
    echo "‚úÖ Authentication state is correctly maintained"
    echo "‚úÖ Logout properly clears authentication"
    
    # Clean up
    rm -f final_test_cookies.txt
    
    exit 0
else
    echo ""
    log "ERROR" "üí• SOME CRITICAL TESTS FAILED!"
    echo ""
    echo "‚ùå $((CRITICAL_TESTS - CRITICAL_PASSED)) out of $CRITICAL_TESTS critical tests failed"
    echo "üö® Authentication system needs attention"
    
    # Clean up
    rm -f final_test_cookies.txt
    
    exit 1
fi